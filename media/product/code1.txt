Second smallest--
#include <stdio.h>
#include <conio.h>
int main()
{
int i, n, arr[20], small, second_small;
printf("\n Enter the number of elements in the array : ");
scanf("%d", &n);
printf("\n Enter the elements: ");
for(i=0;i<n;i++)
scanf("%d",&arr[i]);
small = arr[0];
for(i=1;i<n;i++)
{
if(arr[i]<small)
small = arr[i];
}
second_small = arr[1];
for(i=0;i<n;i++)
{
if(arr[i] != small)
{
if(arr[i]<second_small)
second_small = arr[i];
}
}
printf("\n The numbers you entered are : ");
for(i=0;i<n;i++)
printf("\t %d", arr[i]);
printf("\n The smallest of these numbers is : %d",small);
printf("\n The second smallest of these numbers is : %d",second_small);
return 0;
}

Insert any place--
#include <stdio.h>
int main()
{
    int array[30], pos, x, n, value;
    printf("Enter number of elements in the array\n");
    scanf("%d", &n);
    printf("Enter the elements\n", );
    for (x = 0; x < n; x++)    
        scanf("%d", &array[x]);
    printf("Please enter the location where you want to insert an new element\n");
    scanf("%d", &pos);
    printf("Enter the value\n");
    scanf("%d", &value);
    for (x = n - 1; x >= pos - 1; x--)    
        array[x+1] = array[x];
    array[pos-1] = value;
    printf("Final Array is:\n");
    for (x = 0; x <= n; x++)    
        printf("%d\n", array[x]);    
    return 0;
}

matrix --
#include<stdio.h>
int main()
{
    int a[3][3], b[3][3], c[3][3], sum=0, i, j, k;
    printf("Enter first 3*3 matrix: ");
    for(i=0; i<3; i++)
    {
        for(j=0; j<3; j++)
            scanf("%d", &a[i][j]);
    }
    printf("Enter second 3*3 matrix: ");
    for(i=0; i<3; i++)
    {
        for(j=0; j<3; j++)
            scanf("%d", &b[i][j]);
    }
    printf("\nMultiplying two matrices...");
    for(i=0; i<3; i++)
    {
        for(j=0; j<3; j++)
        {
            sum=0;
            for(k=0; k<3; k++)
                sum = sum + a[i][k] * b[k][j];
            c[i][j] = sum;
        }
    }
    printf("\nproduct of the two given Matrix is: \n");
    for(i=0; i<3; i++)
    {
        for(j=0; j<3; j++)
            printf("%d\t", c[i][j]);
        printf("\n");
    }
    return 0;
}

Linear--
#include<stdio.h>
int main()
{
    int n,srch;
    printf("Enter the number of element");
    scanf("%d",&n);
    int arr[n];
    printf("Enter the element");
    for(int i=0;i<n;i++)
    {
    scanf("%d",&arr[i]);
    }
    printf("Enter element to be searched");
    scanf("%d",&srch);
    for(int i=0;i<srch;i++)
    {
        if(arr[i]==srch)
        {
            printf("The element is at this position %d\n",i);
        }
        else
        printf("the element is not at this position %d\n",i);
    }
return 0;
}

Binary--
#include <stdio.h>
int main()
{
  int c, first, last, middle, n, search, array[100];


  printf("Enter number of elements\n");
  scanf("%d", &n);


  printf("Enter %d integers\n", n);


  for (c = 0; c < n; c++)
    scanf("%d", &array[c]);


  printf("Enter value to find\n");
  scanf("%d", &search);


  first = 0;
  last = n - 1;
  middle = (first+last)/2;


  while (first <= last) {
    if (array[middle] < search)
      first = middle + 1;
    else if (array[middle] == search) {
      printf("%d found at location %d.\n", search, middle+1);
      break;
    }
    else
      last = middle - 1;


    middle = (first + last)/2;
  }
  if (first > last)
    printf("Not found! %d isn't present in the list.\n", search);


  return 0;
}

Selection--
#include <stdio.h>
int main()
{
  int array[100], n, c, d, position, t;


  printf("Enter number of elements\n");
  scanf("%d", &n);


  printf("Enter %d integers\n", n);


  for (c = 0; c < n; c++)
    scanf("%d", &array[c]);


  for (c = 0; c < (n - 1); c++) // finding minimum element (n-1) times
  {
    position = c;


    for (d = c + 1; d < n; d++)
    {
      if (array[position] > array[d])
        position = d;
    }
    if (position != c)
    {
      t = array[c];
      array[c] = array[position];
      array[position] = t;
    }
  }


  printf("Sorted list in ascending order:\n");


  for (c = 0; c < n; c++)
    printf("%d\n", array[c]);


  return 0;
}

Insertion--
#include <stdio.h>
int main(void)
{
    int n, i, j, temp;
    int arr[64];
    printf("Enter number of elements\n");
    scanf("%d", &n);
    printf("Enter %d integers\n", n);
    for (i = 0; i < n; i++) 
    {
        scanf("%d", &arr[i]);
    }
    for (i = 1; i < n; i++) 
    {
        j = i;
        while (j > 0 && arr[j - 1] > arr[j]) 
        {
            temp = arr[j];
            arr[j] = arr[j - 1];
            arr[j - 1] = temp;
            j--;
        }
    }
    printf("Sorted list in ascending order:\n");
    for (i = 0; i < n; i++) 
    {
        printf("%d\n", arr[i]);
    }
    return 0;
}

Quick--
#include <stdio.h>  
int partition (int a[], int start, int end)  
{  
    int pivot = a[end];
    int i = (start - 1);  
  
    for (int j = start; j <= end - 1; j++)  
    {  
        
        if (a[j] < pivot)  
        {  
            i++; 
            int t = a[i];  
            a[i] = a[j];  
            a[j] = t;  
    
            
        }  
    }  
    int t = a[i+1];  
    a[i+1] = a[end];  
    a[end] = t;  
    return (i + 1);  
}  
  


void quick(int a[], int start, int end) 
{  
    if (start < end)  
    {  
        int p = partition(a, start, end);
        quick(a, start, p - 1);  
        quick(a, p + 1, end);  
    }  
}  
  
void printArr(int a[], int n)  
{  
    int i;  
    for (i = 0; i < n; i++)  
        printf("%d ", a[i]);  
}  
int main()  
{  
    int a[] = { 24, 9, 29, 14, 19, 27 };  
    int n = sizeof(a) / sizeof(a[0]);  
    printf("Before sorting array elements are - \n");  
    printArr(a, n);  
    quick(a, 0, n - 1);  
    printf("\nAfter sorting array elements are - \n");    
    printArr(a, n);  
      
    return 0;  
}  

Insertion in link list--
#include<stdio.h>
#include<stdlib.h>


struct Node{
    int data;
    struct Node *next;
};


void insertStart(struct Node** head, int data){
    struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = *head;
    *head = newNode;
}
void insertLast(struct Node** head, int data){


    struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));


    newNode->data = data;
    newNode->next = NULL;
    if(*head==NULL){
        *head = newNode;
        return;
    }


    struct Node* temp = *head;


    while(temp->next!=NULL)
        temp = temp->next;


    temp->next = newNode;
}


void display(struct Node* node){


    while(node!=NULL){
        printf("%d ",node->data);
        node = node->next;
    }
    printf("\n");
}


int main()
{
    struct Node* head = NULL;


    insertStart(&head,12);
    insertStart(&head,16);
    insertStart(&head,20);


    insertLast(&head,10);
    insertLast(&head,14);
    insertLast(&head,18);
    insertLast(&head,11);
    display(head); 
    return 0; 
}

Double--
#include<stdio.h>
#include<stdlib.h>


struct Node{
    int data;
    struct Node *next;
    struct Node *prev;
};
void insertStart(struct Node** head, int data){


    struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));


    newNode->data = data;
    newNode->next = *head;
    newNode->prev = NULL;
    if(*head !=NULL)
        (*head)->prev = newNode;
    *head = newNode; 
}
void display(struct Node* node) 
{ 
    struct Node *end;
    printf("List in Forward direction: ");
    
    while (node != NULL) { 
        printf(" %d ", node->data); 
        end = node;
        node = node->next; 
    }
}


int main()
{
    struct Node* head = NULL;


    insertStart(&head,12);
    insertStart(&head,16);
    insertStart(&head,20);


    display(head); 
    return 0; 
}

Stack--
#include <stdio.h>  
#include <stdlib.h>  
void push();  
void pop();  
void display();  
struct node   
{  
int val;  
struct node *next;  
};  
struct node *head;  
  
void main ()  
{  
    int choice=0; 
    while(choice != 4)  
    { 
        printf("\n1.Push\n2.Pop\n3.Show\n4.Exit");  
        printf("\n Enter your choice \n");        
        scanf("%d",&choice);  
        switch(choice)  
        {  
            case 1:  
            {   
                push();  
                break;  
            }  
            case 2:  
            {  
                pop();  
                break;  
            }  
            case 3:  
            {  
                display();  
                break;  
            }  
            case 4:   
            {  
                printf("Exiting....");  
                break;   
            }  
            default:  
            {  
                printf("Please Enter valid choice ");  
            }   
    };  
}  
}  
void push ()  
{  
    int val;  
    struct node *ptr = (struct node*)malloc(sizeof(struct node));   
    if(ptr == NULL)  
    {  
        printf("not able to push the element");   
    }  
    else   
    {  
        printf("Enter the value");  
        scanf("%d",&val);  
        if(head==NULL)  
        {         
            ptr->val = val;  
            ptr -> next = NULL;  
            head=ptr;  
        }   
        else   
        {  
            ptr->val = val;  
            ptr->next = head;  
            head=ptr;  
               
        }  
        printf("Item pushed");  
          
    }  
}  
  
void pop()  
{  
    int item;  
    struct node *ptr;  
    if (head == NULL)  
    {  
        printf("Underflow");  
    }  
    else  
    {  
        item = head->val;  
        ptr = head;  
        head = head->next;  
        free(ptr);  
        printf("Item popped");  
          
    }  
}  
void display()  
{  
    int i;  
    struct node *ptr;  
    ptr=head;  
    if(ptr == NULL)  
    {  
        printf("Stack is empty\n");  
    }  
    else  
    {  
        printf("Printing Stack elements \n");  
        while(ptr!=NULL)  
        {  
            printf("%d\n",ptr->val);  
            ptr = ptr->next;  
        }  
    }  
} 

Queue--
#include<stdio.h>
#include<stdlib.h>


struct node {
    int data;
    struct node * next;
};


struct node * front = NULL;
struct node * rear = NULL;


void enqueue(int value) {
    struct node * ptr;
    ptr = (struct node * ) malloc(sizeof(struct node));
    ptr -> data = value;
    ptr -> next = NULL;
    if ((front == NULL) && (rear == NULL)) {
        front = rear = ptr;
    } else {
        rear -> next = ptr;
        rear = ptr;
    }
    printf("Node is Inserted\n\n");
}


int dequeue() {
    if (front == NULL) {
        printf("\nUnderflow\n");
        return -1;
    } else {
        struct node * temp = front;
        int temp_data = front -> data;
        front = front -> next;
        free(temp);
        return temp_data;
    }
}


void display() {
    struct node * temp;
    if ((front == NULL) && (rear == NULL)) {
        printf("\nQueue is Empty\n");
    } else {
        printf("The queue is \n");
        temp = front;
        while (temp) {
            printf("%d--->", temp -> data);
            temp = temp -> next;
        }
        printf("NULL\n\n");
    }
}


int main() {
    int choice, value;
    printf("\nImplementation of Queue using Linked List\n");
    while (choice != 4) {
        printf("1.Enqueue\n2.Dequeue\n3.Display\n4.Exit\n");
        printf("\nEnter your choice : ");
        scanf("%d", & choice);
        switch (choice) {
            case 1:
                printf("\nEnter the value to insert: ");
                scanf("%d", & value);
                enqueue(value);
                break;
            case 2:
                printf("Popped element is :%d\n", dequeue());
                break;
            case 3:
                display();
                break;
            case 4:
                exit(0);
                break;
            default:
                printf("\nWrong Choice\n");
        }
    }
    return 0;
}

Tree insertion--
#include <stdio.h>
#include <stdlib.h>
 
struct node {
    int key;
    struct node *left, *right;
};
struct node* newNode(int item)
{
    struct node* temp
        = (struct node*)malloc(sizeof(struct node));
    temp->key = item;
    temp->left = temp->right = NULL;
    return temp;
}
void inorder(struct node* root)
{
    if (root != NULL) {
        inorder(root->left);
        printf("%d \n", root->key);
        inorder(root->right);
    }
}


struct node* insert(struct node* node, int key)
{


    if (node == NULL)
        return newNode(key);


    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);


    return node;
}


int main()
{


    struct node* root = NULL;
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);


    inorder(root);
 
    return 0;
}

Tree del--
#include <stdio.h>
#include <stdlib.h>
 
struct node {
    int key;
    struct node *left, *right;
};


struct node* newNode(int item)
{
    struct node* temp
        = (struct node*)malloc(sizeof(struct node));
    temp->key = item;
    temp->left = temp->right = NULL;
    return temp;
}
void inorder(struct node* root)
{
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->key);
        inorder(root->right);
    }
}


struct node* insert(struct node* node, int key)
{


    if (node == NULL)
        return newNode(key);


    if (key < node->key)
        node->left = insert(node->left, key);
    else
        node->right = insert(node->right, key);


    return node;
}


struct node* minValueNode(struct node* node)
{
    struct node* current = node;


    while (current && current->left != NULL)
        current = current->left;
 
    return current;
}
struct node* deleteNode(struct node* root, int key)
{
    // base case
    if (root == NULL)
        return root;
    if (key < root->key)
        root->left = deleteNode(root->left, key);


    else if (key > root->key)
        root->right = deleteNode(root->right, key);
 


    else {


        if (root->left == NULL) {
            struct node* temp = root->right;
            free(root);
            return temp;
        }
        else if (root->right == NULL) {
            struct node* temp = root->left;
            free(root);
            return temp;
        }


        struct node* temp = minValueNode(root->right);
 
        root->key = temp->key;


        root->right = deleteNode(root->right, temp->key);
    }
    return root;
}


int main()
{


    struct node* root = NULL;
    root = insert(root, 50);
    root = insert(root, 30);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 70);
    root = insert(root, 60);
    root = insert(root, 80);
 
    printf("Inorder traversal of the given tree \n");
    inorder(root);
 
    printf("\nDelete 20\n");
    root = deleteNode(root, 20);
    printf("Inorder traversal of the modified tree \n");
    inorder(root);
 
    printf("\nDelete 30\n");
    root = deleteNode(root, 30);
    printf("Inorder traversal of the modified tree \n");
    inorder(root);
 
    printf("\nDelete 50\n");
    root = deleteNode(root, 50);
    printf("Inorder traversal of the modified tree \n");
    inorder(root);
 
    return 0;
}

Count--
#include<stdio.h>
#include<limits.h>
#include<stdlib.h>


void printArray(int *A, int n)
{
    for (int i = 0; i < n; i++)
    {
        printf("%d ", A[i]);
    }
    printf("\n");
}




int maximum(int A[], int n){
    int max = INT_MIN;
    for (int i = 0; i < n; i++)
    {
        if (max < A[i]){
            max = A[i];
        }
    }
    return max;
    
}
void countSort(int * A, int n){
    int i, j;
    // Find the maximum element in A
    int max = maximum(A, n); 


    // Create the count array
    int* count = (int *) malloc((max+1)*sizeof(int));


    // Initialize the array elements to 0
    for (i = 0; i < max+1; i++)
    {
        count[i] = 0; 
    }


    // Increment the corresponding index in the count array
    for (i = 0; i < n; i++)
    {
        count[A[i]] = count[A[i]] + 1; 
    }


    i =0; // counter for count array
    j =0; // counter for given array A


    while(i<= max){
        if(count[i]>0){
            A[j] = i;
            count[i] = count[i] - 1;
            j++;
        }
        else{
            i++;
        }
    } 
}


int main(){
    int A[] = {9, 1, 4, 14, 4, 15, 6};
    int n = 7;
    printArray(A, n);
    countSort(A, n);
    printArray(A, n); 
    return 0;
}